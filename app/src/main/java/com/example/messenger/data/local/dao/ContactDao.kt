/* Copyright (C) 2021  Ali Moukaled
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package com.example.messenger.data.local.dao

import androidx.room.*

import com.example.messenger.data.local.entities.BlockedContact
import com.example.messenger.data.local.entities.Contact
import com.example.messenger.data.local.entities.Message
import com.example.messenger.data.local.relations.ContactWithMessages

@Dao
interface ContactDao {

    /**
     * Inserts the [Contact] into the Contact Table.
     * @param contact The contact to be inserted into the table.
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertContact(contact: Contact)

    /**
     * Inserts the [Message] into the Messages Table.
     * @param message The message to be inserted into the table.
     * @return The autogenerated id of the inserted message.
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertMessage(message: Message): Long

    /**
     * Gets the [ContactWithMessages] associated by the [phoneNumber]
     * @param phoneNumber The phone number of the [Contact].
     * @return The ContactWithMessages relation between [Contact] and [Message] - aka chat
     */
    @Transaction
    @Query("SELECT * FROM CONTACT WHERE phoneNumber = :phoneNumber")
    suspend fun getContactWithMessagesByPhoneNumber(phoneNumber: String): ContactWithMessages

    /**
     * @return [List] of [ContactWithMessages].
     */
    @Transaction
    @Query("SELECT * FROM Contact")
    suspend fun getAllContactWithMessages(): List<ContactWithMessages>

    /**
     * Deleted all the messages associated with the [ids].
     * @param ids The list of message ids to delete.
     */
    @Query("DELETE FROM MESSAGE WHERE id IN (:ids)")
    suspend fun deleteMessages(ids: List<Long>)

    /**
     * Updates the message.
     * @param message The message to update.
     */
    @Update
    suspend fun updateMessage(message: Message)

    /**
     * @return Whether the contact associated with the [phoneNumber] exists
     * in the Database.
     * @param [phoneNumber] The phone number of the contact to be checked.
     */
    @Query("SELECT EXISTS(SELECT * FROM CONTACT WHERE phoneNumber = :phoneNumber)")
    suspend fun contactExists(phoneNumber: String): Boolean

    /**
     * @return [List] of all [Contact] ids that are present in the
     * contacts table.
     */
    @Query("SELECT (phoneNumber) FROM CONTACT")
    suspend fun getAllContactIds(): List<String>

    /**
     * @return [List] of all [Contact] present in the table.
     */
    @Query("SELECT * FROM CONTACT")
    suspend fun getAllContacts(): List<Contact>

    /**
     * Clears the Contact table.
     */
    @Query("DELETE FROM contact")
    suspend fun clearContactTable()

    /**
     * Clears the Message table.
     */
    @Query("DELETE FROM message")
    suspend fun clearMessageTable()

    /**
     * Clears the BlockedContact table.
     */
    @Query("DELETE FROM blockedcontact")
    suspend fun clearBlockedContactTable()

    /**
     * Inserts a the passed [BlockedContact] into the table.
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertBlockedContact(blockedContact: BlockedContact)

    /**
     * @return All [BlockedContact] from the table.
     */
    @Query("SELECT * FROM blockedcontact")
    suspend fun getAllBlockedContacts(): List<BlockedContact>

    /**
     * Checks if the passed phone number is associated with any [BlockedContact]
     * in the table. Or in other words; checks if the user is blocked or not.
     */
    @Query("SELECT EXISTS(SELECT * FROM blockedcontact WHERE phoneNumber = :phoneNumber)")
    suspend fun blockedContactExists(phoneNumber: String): Boolean

    /**
     * Deletes the [BlockedContact] from the table.
     */
    @Delete
    suspend fun deleteBlockedContact(blockedContact: BlockedContact)

    /**
     * Updates the contact if it exists in the table.
     */
    @Update
    suspend fun updateContact(contact: Contact)

    /**
     * @return Contact if the passed phone number exists, else null.
     */
    @Query("SELECT * FROM CONTACT WHERE phoneNumber = :phoneNumber")
    suspend fun getContactByPhoneNumber(phoneNumber: String): Contact?

    /**
     * Deletes a contact from the database.
     */
    @Delete
    suspend fun deleteContact(contact: Contact)

    @Query("SELECT * FROM Message WHERE id = :id")
    suspend fun getMessageById(id: Long): Message?
}